// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnotherServiceClient is the client API for AnotherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnotherServiceClient interface {
	ListAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAllAnotherResponse, error)
	Create(ctx context.Context, in *CreateAnotherRequest, opts ...grpc.CallOption) (*Another, error)
	Get(ctx context.Context, in *GetAnotherRequest, opts ...grpc.CallOption) (*Another, error)
}

type anotherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnotherServiceClient(cc grpc.ClientConnInterface) AnotherServiceClient {
	return &anotherServiceClient{cc}
}

func (c *anotherServiceClient) ListAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAllAnotherResponse, error) {
	out := new(ListAllAnotherResponse)
	err := c.cc.Invoke(ctx, "/template.AnotherService/ListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anotherServiceClient) Create(ctx context.Context, in *CreateAnotherRequest, opts ...grpc.CallOption) (*Another, error) {
	out := new(Another)
	err := c.cc.Invoke(ctx, "/template.AnotherService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anotherServiceClient) Get(ctx context.Context, in *GetAnotherRequest, opts ...grpc.CallOption) (*Another, error) {
	out := new(Another)
	err := c.cc.Invoke(ctx, "/template.AnotherService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnotherServiceServer is the server API for AnotherService service.
// All implementations must embed UnimplementedAnotherServiceServer
// for forward compatibility
type AnotherServiceServer interface {
	ListAll(context.Context, *emptypb.Empty) (*ListAllAnotherResponse, error)
	Create(context.Context, *CreateAnotherRequest) (*Another, error)
	Get(context.Context, *GetAnotherRequest) (*Another, error)
	mustEmbedUnimplementedAnotherServiceServer()
}

// UnimplementedAnotherServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnotherServiceServer struct {
}

func (UnimplementedAnotherServiceServer) ListAll(context.Context, *emptypb.Empty) (*ListAllAnotherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAll not implemented")
}
func (UnimplementedAnotherServiceServer) Create(context.Context, *CreateAnotherRequest) (*Another, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAnotherServiceServer) Get(context.Context, *GetAnotherRequest) (*Another, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAnotherServiceServer) mustEmbedUnimplementedAnotherServiceServer() {}

// UnsafeAnotherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnotherServiceServer will
// result in compilation errors.
type UnsafeAnotherServiceServer interface {
	mustEmbedUnimplementedAnotherServiceServer()
}

func RegisterAnotherServiceServer(s grpc.ServiceRegistrar, srv AnotherServiceServer) {
	s.RegisterService(&AnotherService_ServiceDesc, srv)
}

func _AnotherService_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnotherServiceServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template.AnotherService/ListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnotherServiceServer).ListAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnotherService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnotherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnotherServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template.AnotherService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnotherServiceServer).Create(ctx, req.(*CreateAnotherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnotherService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnotherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnotherServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template.AnotherService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnotherServiceServer).Get(ctx, req.(*GetAnotherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnotherService_ServiceDesc is the grpc.ServiceDesc for AnotherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnotherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "template.AnotherService",
	HandlerType: (*AnotherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAll",
			Handler:    _AnotherService_ListAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AnotherService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AnotherService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/another.proto",
}
